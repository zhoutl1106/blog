(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{217:function(e,t,a){"use strict";a.r(t);var r=a(0),o=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"delayed-parity-generation-in-mds-storage-codes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delayed-parity-generation-in-mds-storage-codes"}},[e._v("#")]),e._v(" Delayed Parity Generation in MDS Storage Codes")]),e._v(" "),a("p",[e._v("Publisher Link: ["),a("a",{attrs:{href:"https://ieeexplore.ieee.org/document/8437700",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://ieeexplore.ieee.org/document/8437700"),a("OutboundLink")],1),e._v("]")]),e._v(" "),a("h2",{attrs:{id:"abstract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[e._v("#")]),e._v(" Abstract")]),e._v(" "),a("p",[e._v("We propose a delayed parity generation technique for maximum distance separable (MDS) storage codes, for two possible applications: the first is to improve the write-speed during data intake where only a subset of the parities are initially produced and stored into the system, and the rest can be produced from the stored data during a later time of lower system load; the second is to provide better adaptivity, where a lower number of parities can be chosen initially in a storage system, and more parities can be produced when the existing ones are not sufficient to guarantee the needed reliability or performance. In both applications, it is important to reduce the data access as much as possible during the delayed parity generation procedure. For this purpose, we first identify the fundamental limit for delayed parity generation through a connection to the well-known multicast network coding problem, then provide an explicit and low-complexity code transformation that is applicable on any MDS codes to obtain optimal codes. The problem we consider is closely related to the regenerating code problem, however the proposed codes are much simpler and have a much smaller subpacketization factor than regenerating codes, and thus our result in fact shows that blindly adopting regenerating codes in these two settings is unnecessary and wasteful.")])])}),[],!1,null,null,null);t.default=o.exports}}]);